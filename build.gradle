plugins {
    id 'java'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.4"
}

group 'ch.so.agi'
version '0.1.' + getBuildNumber()
sourceCompatibility = 11

repositories {
    mavenCentral()
}

dependencies {
    compile 'commons-cli:commons-cli:1.4'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.1'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.18'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.3'
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes (
                "Main-Class": "ch.so.agi.sql2json.Application",
                "Implementation-Title": "sql2json",
                "Implementation-Version": project.version + " (Benötigt Java 11)",
                "Implementation-Vendor": "Amt für Geoinformation, Kt. Solothurn",
                "Build-Timestamp": getTimestamp(),
                "Build-Git-Commit": getCheckedOutGitCommitHash()
        )
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
        }
    }
}

bintray {
    user = findProperty("sql2json.publish.user")
    key = findProperty("sql2json.publish.pass")
    publications = ['mavenPublication']
    publish = true

    pkg {
        repo = 'simi'
        name = 'sql2json_dev'
        userOrg = 'sogis'
        licenses = ['MIT']
        labels = ['simi', 'sql2json', 'sql', 'template', 'json']
        version {
            name = project.version
            desc = project.version
            released  = new Date()
        }
    }
}

task stage(type: Copy, dependsOn: build) {
    from file("$buildDir/libs/")
    into file("$buildDir")
    include "sql2json*.jar"

    rename { String filename ->
        return "sql2json.jar"
    }
}

String getBuildNumber() {
    String val = System.getenv('GITHUB_RUN_NUMBER')

    if(val == null)
        val = 'localbuild'

    return val
}

def getCheckedOutGitCommitHash() {
    String val = 'git log -1 --pretty=%H'.execute().text.trim()
    return val
}

def getTimestamp() {
    def date = new Date()
    return date.format('yyyy-MM-dd HH:mm:ss')
}