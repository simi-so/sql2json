plugins {
    id 'java'
    id 'maven-publish'
}

group 'ch.so.agi'
version '1.0.' + getBuildNumber()
sourceCompatibility = 11

repositories {
    mavenCentral()
}

dependencies {
    compile 'commons-cli:commons-cli:1.4'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.0'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.18'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.3'
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes (
                "Main-Class": "ch.so.agi.sql2json.Application",
                "Implementation-Title": "sql2json",
                "Implementation-Version": version + " (Benötigt Java 11)",
                "Implementation-Vendor": "Amt für Geoinformation, Kt. Solothurn",
                "Build-Timestamp": getTimestamp(),
                "Build-Git-Commit": getCheckedOutGitCommitHash()
        )
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

String getBuildNumber() {
    String val = System.getenv('GITHUB_RUN_NUMBER')

    if(val == null)
        val = 'localbuild'

    return val
}

def getCheckedOutGitCommitHash() {
    String val = 'git log -1 --pretty=%H'.execute().text.trim()
    return val
}

def getTimestamp() {
    def date = new Date()
    return date.format('yyyy-MM-dd HH:mm:ss')
}
